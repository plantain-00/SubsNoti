"use strict";
const libs = require("./libs");
const settings = require("./settings");
const services = require("./services");
const user = require("./controllers/api/user");
const userLoggedIn = require("./controllers/api/user/logged_in");
const userJoined = require("./controllers/api/user/joined");
const userCreated = require("./controllers/api/user/created");
const userWatched = require("./controllers/api/user/watched");
const usersJoined = require("./controllers/api/users/joined");
const tokens = require("./controllers/api/tokens");
const organizationsThemes = require("./controllers/api/organizations/themes");
const themes = require("./controllers/api/themes");
const organizations = require("./controllers/api/organizations");
const captcha = require("./controllers/api/captcha");
const html = require("./controllers/html");
const version = require("./controllers/api/version");
const scopes = require("./controllers/api/scopes");
const userRegistered = require("./controllers/api/user/registered");
const userAuthorized = require("./controllers/api/user/authorized");
const userRegisteredClientSecret = require("./controllers/api/user/registered/client_secret");
const userAccessTokens = require("./controllers/api/user/access_tokens");
const userAccessTokensValue = require("./controllers/api/user/access_tokens/value");
const accessTokens = require("./controllers/api/access_tokens");
const userAccessTokenCode = require("./controllers/api/user/access_tokens/code");
const applications = require("./controllers/api/applications");
const app = libs.express();
app.use(libs.compression());
app.use(libs.cookieParser());
app.use(libs.bodyParser.json());
app.use(libs.bodyParser.urlencoded({ extended: true }));
app.use(libs.cors(settings.cors));
services.version.route(app);
services.rateLimit.route(app);
services.router.bind(version.documentOfGet, version.get, app);
services.router.bind(user.documentOfGet, user.get, app);
services.router.bind(user.documentOfUpdate, user.update, app);
services.router.bind(userLoggedIn.documentOfDelete, userLoggedIn.deleteThis, app);
services.router.bind(userJoined.documentOfGet, userJoined.get, app);
services.router.bind(usersJoined.documentOfInvite, usersJoined.invite, app);
services.router.bind(userCreated.documentOfGet, userCreated.get, app);
services.router.bind(organizations.documentOfCreate, organizations.create, app);
services.router.bind(userWatched.documentOfWatch, userWatched.watch, app);
services.router.bind(userWatched.documentOfUnwatch, userWatched.unwatch, app);
services.router.bind(tokens.documentOfCreate, tokens.create, app);
services.router.bind(organizationsThemes.documentOfGet, organizationsThemes.get, app);
services.router.bind(themes.documentOfCreate, themes.create, app);
services.router.bind(themes.documentOfUpdate, themes.update, app);
services.router.bind(captcha.documentOfCreate, captcha.create, app);
services.router.bind(html.documentOfLogin, html.login, app);
services.router.bind(html.documentOfLoginWithGithub, html.loginWithGithub, app);
services.router.bind(html.documentOfGithubCode, html.githubCode, app);
services.router.bind(html.documentOfAuthorize, html.authorize, app);
services.router.bind(scopes.documentOfGet, scopes.get, app);
services.router.bind(userRegistered.documentOfGet, userRegistered.get, app);
services.router.bind(userRegistered.documentOfCreate, userRegistered.create, app);
services.router.bind(userRegistered.documentOfUpdate, userRegistered.update, app);
services.router.bind(userRegistered.documentOfRemove, userRegistered.remove, app);
services.router.bind(userAuthorized.documentOfGet, userAuthorized.get, app);
services.router.bind(userAuthorized.documentOfRemove, userAuthorized.remove, app);
services.router.bind(userRegisteredClientSecret.documentOfReset, userRegisteredClientSecret.reset, app);
services.router.bind(userAccessTokens.documentOfGet, userAccessTokens.get, app);
services.router.bind(userAccessTokens.documentOfCreate, userAccessTokens.create, app);
services.router.bind(userAccessTokens.documentOfUpdate, userAccessTokens.update, app);
services.router.bind(userAccessTokens.documentOfRemove, userAccessTokens.remove, app);
services.router.bind(userAccessTokensValue.documentOfRegenerate, userAccessTokensValue.regenerate, app);
services.router.bind(accessTokens.documentOfCreate, accessTokens.create, app);
services.router.bind(userAccessTokenCode.documentOfConfirm, userAccessTokenCode.confirm, app);
services.router.bind(applications.documentOfGet, applications.get, app);
services.mongo.connect();
services.redis.connect();
services.email.connect();
services.seed.init().then(() => {
    services.logger.logInfo(`initialize successfully.`);
});
const server = app.listen(settings.apiPort, "localhost", () => {
    services.logger.logInfo(`api Server is listening: ${settings.apiPort} and in ${settings.currentEnvironment}`);
});
services.push.connect(server);
